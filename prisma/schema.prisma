// *
// *
// *
// *
// * PRISMA
// *
// *
// *
// *
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// *
// *
// *
// *
// * USER / PERFORMERS
// *
// *
// *
// *
model User {
  id            String          @id @default(cuid())
  email         String          @unique
  emailVerified DateTime?
  image         String?
  name          String?
  firstName     String?
  preferredName String?
  lastName      String?
  createdAt     DateTime        @default(now())
  // auth
  accounts      Account[]
  sessions      Session[]
  // musician
  groups        Group[]
  events        Event[]
  repertoire    Song[]
  songlists     SongListSongs[]
}

model Group {
  id         String          @id @default(cuid())
  events     Event[]
  members    User[]
  repertoire Song[]
  songlists  SongListSongs[]
}

// *
// *
// *
// *
// * AUTH
// *
// *
// *
// *
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// *
// *
// *
// *
// * ADDRESS
// *
// *
// *
// *
model Address {
  id           String     @id @default(cuid())
  complete     String?
  streetNumber String
  street       Street     @relation(fields: [streetId], references: [id])
  streetId     String
  unit         String?
  zipcode      ZipCode    @relation(fields: [zipCodeId], references: [id])
  zipCodeId    String
  //
  locations    Location[]
}

model ZipCode {
  id      String    @id @default(cuid())
  code    Int
  Address Address[]
}

model Street {
  id             String        @id @default(cuid())
  name           String
  neighborhood   Neighborhood? @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId String?
  city           City          @relation(fields: [cityId], references: [id])
  cityId         String
  Address        Address[]
}

model Neighborhood {
  id      String   @id @default(cuid())
  name    String
  streets Street[]
  city    City     @relation(fields: [cityId], references: [id])
  cityId  String
}

model City {
  id            String         @id @default(cuid())
  name          String
  county        County         @relation(fields: [countyId], references: [id])
  countyId      String
  neighborhoods Neighborhood[]
  streets       Street[]
}

model County {
  id      String @id @default(cuid())
  name    String
  state   State  @relation(fields: [stateId], references: [id])
  cities  City[]
  stateId String
}

model State {
  id       String   @id @default(cuid())
  name     String
  counties County[]
}

model Location {
  id         String       @id @default(cuid())
  name       String
  active     Boolean      @default(true)
  website    String?
  phone      String?
  address    Address      @relation(fields: [addressId], references: [id])
  addressId  String
  insideOf   Location?    @relation(name: "LocationHierarchy", fields: [insideOfId], references: [id])
  insideOfId String?
  inside     Location[]   @relation(name: "LocationHierarchy")
  type       LocationType
  stages     Stage[]
  //
  events     Event[]
}

enum LocationType {
  RESTAURANT
  BAR
  CLUB
  THEATER
  VENUE
  COMPLEX
}

model Stage {
  id         String    @id @default(cuid())
  name       String
  active     Boolean   @default(true)
  location   Location  @relation(fields: [locationId], references: [id])
  locationId String
  events     Event[]
  type       StageType
}

enum StageType {
  STAGE
  ROOM
}

// *
// *
// *
// *
// * EVENT RELATED SCHEMA
// *
// *
// *
// *
model Event {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  rsvpLink            String?
  requiresTicket      Boolean   @default(false)
  requiresReservation Boolean   @default(false)
  details             String?
  timeStart           DateTime?
  timeEnd             DateTime?
  location            Location  @relation(fields: [locationId], references: [id])
  locationId          String
  stage               Stage?    @relation(fields: [stageId], references: [id])
  stageId             String?
  performingArtist    User?     @relation(fields: [performingArtistId], references: [id])
  performingArtistId  String?
  performingGroup     Group?    @relation(fields: [performingGroupId], references: [id])
  performingGroupId   String?
}

// *
// *
// *
// *
// * REPERTOIRE 
// *
// *
// *
// *
model SongListSongs {
  id               String       @id @default(cuid())
  user             User?        @relation(fields: [userId], references: [id])
  userId           String?
  group            Group?       @relation(fields: [groupId], references: [id])
  groupId          String?
  song             Song         @relation(fields: [songId], references: [id])
  songId           String
  modulated        Boolean      @default(false)
  performanceRoot  MusicalRoot?
  performanceNotes String?
}

model Artist {
  id    String @id @default(cuid())
  name  String @unique
  songs Song[]
}

model Song {
  id                String          @id @default(cuid())
  title             String
  artist            Artist          @relation(fields: [artistId], references: [id])
  artistId          String
  year              Int?
  genre             Genre?
  root              MusicalRoot?
  mode              MusicalMode?
  songlists         SongListSongs[]
  inUserRepertoire  User[]
  inGroupRepertoire Group[]
}

enum MusicalRoot {
  A
  B_FLAT
  B
  C
  D_FLAT_C_SHARP
  D
  E_FLAT
  E
  F
  G_FLAT_F_SHARP
  G
  A_FLAT_G_SHARP
}

enum MusicalMode {
  MAJOR
  DORIAN
  PHRYGIAN
  LYDIAN
  MIXOLYDIAN
  MINOR
  LOCRIAN
}

enum Genre {
  POP_ROCK_RB
  JAZZ
  STANDARD
  BLUES
  CLASSICAL
  BOSSA_NOVA
  MUSICAL_THEATER
  MISCELLANEOUS
}
