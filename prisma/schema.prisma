generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  emailVerified DateTime?
  image         String?
  name          String?
  firstName     String?
  preferredName String?
  lastName      String?
  createdAt     DateTime        @default(now())
  accounts      Account[]
  events        Event[]
  recordings    Recording[]
  sessions      Session[]
  songlists     SongListSongs[]
  groups        Group[]         @relation("GroupToUser")
  repertoire    Song[]          @relation("SongToUser")
}

model Group {
  id         String          @id @default(cuid())
  events     Event[]
  songlists  SongListSongs[]
  repertoire Song[]          @relation("GroupToSong")
  members    User[]          @relation("GroupToUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id           String  @id @default(cuid())
  streetNumber String
  streetId     String
  unit         String?
  zipCodeId    String
  complete     String?
  street       Street  @relation(fields: [streetId], references: [id])
  zipcode      ZipCode @relation(fields: [zipCodeId], references: [id])
}

model ZipCode {
  id      String    @id @default(cuid())
  code    Int
  Address Address[]
}

model Street {
  id             String        @id @default(cuid())
  name           String
  neighborhoodId String?
  cityId         String
  Address        Address[]
  city           City          @relation(fields: [cityId], references: [id])
  neighborhood   Neighborhood? @relation(fields: [neighborhoodId], references: [id])
}

model Neighborhood {
  id      String   @id @default(cuid())
  name    String
  cityId  String
  city    City     @relation(fields: [cityId], references: [id])
  streets Street[]
}

model City {
  id            String         @id @default(cuid())
  name          String
  countyId      String
  county        County         @relation(fields: [countyId], references: [id])
  neighborhoods Neighborhood[]
  streets       Street[]
}

model County {
  id      String @id @default(cuid())
  name    String
  stateId String
  cities  City[]
  state   State  @relation(fields: [stateId], references: [id])
}

model State {
  id       String   @id @default(cuid())
  name     String
  counties County[]
}

model Location {
  id      String       @id @default(cuid())
  name    String
  type    LocationType
  active  Boolean      @default(true)
  phone   String?
  website String?
  address String
  events  Event[]
  stages  Stage[]
}

model Stage {
  id         String    @id @default(cuid())
  name       String
  active     Boolean   @default(true)
  locationId String
  type       StageType
  events     Event[]
  location   Location  @relation(fields: [locationId], references: [id])
}

model Event {
  id                   String    @id @unique @default(cuid())
  name                 String
  description          String?
  time_start           DateTime? @db.Timestamptz(6)
  time_end             DateTime? @db.Timestamptz(6)
  location_id          String
  performing_artist_id String?
  performing_group_id  String?
  stage_id             String?
  details              String?
  requires_reservation Boolean   @default(false)
  requires_ticket      Boolean   @default(false)
  rsvp_link            String?
  is_private           Boolean   @default(false)
  location             Location  @relation(fields: [location_id], references: [id])
  performing_artist    User?     @relation(fields: [performing_artist_id], references: [id])
  performing_group     Group?    @relation(fields: [performing_group_id], references: [id])
  stage                Stage?    @relation(fields: [stage_id], references: [id])
}

model Recording {
  id              String @id @default(cuid())
  storageUrl      String @unique
  storageId       String @unique
  storageFileName String
  userId          String
  recordingArtist String
  recordingTitle  String
  user            User   @relation(fields: [userId], references: [id])
}

model SongListSongs {
  id               String       @id @default(cuid())
  userId           String?
  groupId          String?
  songId           String
  modulated        Boolean      @default(false)
  performanceRoot  MusicalRoot?
  performanceNotes String?
  group            Group?       @relation(fields: [groupId], references: [id])
  song             Song         @relation(fields: [songId], references: [id])
  user             User?        @relation(fields: [userId], references: [id])
}

model Artist {
  id    String @id @default(cuid())
  name  String @unique
  songs Song[]
}

model Song {
  id                String          @id @default(cuid())
  title             String
  artistId          String
  year              Int?
  genre             Genre?
  root              MusicalRoot?
  mode              MusicalMode?
  artist            Artist          @relation(fields: [artistId], references: [id])
  songlists         SongListSongs[]
  inGroupRepertoire Group[]         @relation("GroupToSong")
  inUserRepertoire  User[]          @relation("SongToUser")
}

enum LocationType {
  RESTAURANT
  BAR
  CLUB
  THEATER
  VENUE
  COMPLEX
}

enum StageType {
  STAGE
  ROOM
  AREA
}

enum MusicalRoot {
  A
  B_FLAT
  B
  C
  D_FLAT_C_SHARP
  D
  E_FLAT
  E
  F
  G_FLAT_F_SHARP
  G
  A_FLAT_G_SHARP
}

enum MusicalMode {
  MAJOR
  DORIAN
  PHRYGIAN
  LYDIAN
  MIXOLYDIAN
  MINOR
  LOCRIAN
}

enum Genre {
  POP_ROCK_RB
  JAZZ
  STANDARD
  BLUES
  CLASSICAL
  BOSSA_NOVA
  MUSICAL_THEATER
  MISCELLANEOUS
}
